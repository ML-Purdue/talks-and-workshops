<?xml version="1.0" encoding="UTF-8"?>
<CrseCat:CourseCatalog xsi:schemaLocation="urn:org:pesc:sector:CourseCatalog:v1.0.0 CourseCatalog_v1.0.0.xsd" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:CrseCat="urn:org:pesc:sector:CourseCatalog:v1.0.0">
    <Source>
        <Organization>
            <OrganizationName>Purdue Production Instance</OrganizationName>
            <CEEBACT>001631</CEEBACT>
            <Contacts>
                <Address>
                    <AddressLine>Purdue University</AddressLine>
                    <AddressLine></AddressLine>
                    <AddressLine></AddressLine>
                    <City>West Lafayette</City>
                    <StateProvince>Indiana</StateProvince>
                    <PostalCode>47907</PostalCode>
                    <CountryCode></CountryCode>
                </Address>
            </Contacts>
        </Organization>
    </Source>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>10000</CourseNumber>
        <CourseShortTitle>Intro To C S</CourseShortTitle>
        <CourseLongTitle>Intro To C S</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  This course is intended to: integrate freshman computer science majors into the department; help them adjust to university life; assist them in developing their academic and intellectual capabilities; introduce them to contemporary issues in computer science; provide an overview of the careers open to those with degrees in computer science.  this course must be taken pass/no pass only.  Credit by examination is not available for this course. Typically offered Summer Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>10100</CourseNumber>
        <CourseShortTitle>Digital Literacy</CourseShortTitle>
        <CourseLongTitle>Digital Literacy</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Survey of the digital world, computers as multi-purpose machines, digital information, definition of programming, computers everywhere (the Internet of things), computers that perform simultaneous computations, how apps work, data storage and searching, databases, digital audio, graphics, video, computer networks and the Internet, the World Wide Web and Internet sharing services, network and Internet performance, real-time services, artificial intelligence, cloud computing, security, and privacy. CS students may take course for elective credit only. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201708</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>10200</CourseNumber>
        <CourseShortTitle>Computer Sc Concepts</CourseShortTitle>
        <CourseLongTitle>Computer Sc Concepts</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course emphasizes computing concepts of special interest to first-year students.  Hands-on applications are stressed. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>10700</CourseNumber>
        <CourseShortTitle>Intro Cmptr Sci Majors</CourseShortTitle>
        <CourseLongTitle>Intro Cmptr Sci Majors</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  A general introduction to computers and their applications. A fundamental understanding of Information Systems, components, terminology, programming concepts and representative applications. Contemporary issues. Hands-on experience with operating systems; information gathering systems; word processing; spreadsheets, including presentation graphics and statistical functions database systems; statistical packages; and programming principles a final, capstone project required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>11000</CourseNumber>
        <CourseShortTitle>Intro To Computers</CourseShortTitle>
        <CourseLongTitle>Intro To Computers</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Computer applications and how they can be used for solving problems in everyday life. The Internet with an emphasis on obtaining information from the World Wide Web, use of a database with an emphasis on data storage and retrieval, spreadsheets, word processing, presentation software, integration of multiple software packages.  May not be taken for credit by Computer Science majors. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201408</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>11200</CourseNumber>
        <CourseShortTitle>Computer Science For Everyone</CourseShortTitle>
        <CourseLongTitle>Computer Science For Everyone</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course is designed to provide a broad and realistic idea of what computer professionals do and how they do it. Designed to be accessible to all students, it will prepare them for later computing courses, including software development courses. The course may introduce programming concepts and programming languages. Students will be introduced to various professional opportunities and work environments. Current topics in computer science as they relate to society and automation will be covered. Students will leave the course with a basic understanding and appreciation of automation and computer science. Typically offered Summer Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>11400</CourseNumber>
        <CourseShortTitle>Intro To Visual Programming</CourseShortTitle>
        <CourseLongTitle>Intro To Visual Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course introduces programming using a visual approach. Students will learn the syntax and structure of an object-oriented programming language. They will develop stand-alone, event-driven, graphical user interface (GUI) applications for personal computer use. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>12300</CourseNumber>
        <CourseShortTitle>Programming I: Java</CourseShortTitle>
        <CourseLongTitle>Programming I: Java</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course is an introduction to computer science and computer programming with an emphasis on their scientific basis and applications. The primary language for this course is Java. The topics of the course includes: indentifiers, basic data types, operators, expressions, control statements, methods, recursion program structure, arrays, objects, classes, inheritance, polymorphism, and the design of simple graphical user interfaces. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>DPCR</RAPCode>
            <RAPName>Department Credit</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>12400</CourseNumber>
        <CourseShortTitle>Programming II: C++</CourseShortTitle>
        <CourseLongTitle>Programming II: C++</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course is an extension of CS 12300 that introduces the C++ programming language. The topics of the course include: functions, program structure, pointers, objects, classes, and inheritance in C++, standard template library, files, streams, and the preprocessor. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201905</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>14000</CourseNumber>
        <CourseShortTitle>Intro To DP (VBasic)</CourseShortTitle>
        <CourseLongTitle>Intro To DP (VBasic)</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Not available for credit toward graduation in the School of Science or for computer technology majors. Intended for students who expect to use computers outside the physical sciences and engineering. Introduction to the Visual Basic programming language and the development of event-driven programs.
. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>15500</CourseNumber>
        <CourseShortTitle>Cobol Programming</CourseShortTitle>
        <CourseLongTitle>Cobol Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Study of the COBOL programming language with emphasis on file organization and processing. Topics covered include data types, data definition, subprograms and parameter passing. Emphasis on developing program structure and style. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>15800</CourseNumber>
        <CourseShortTitle>C Programming</CourseShortTitle>
        <CourseLongTitle>C Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Introduction to structured programming in C. Data types and expression evaluation. Programmer-defined functions including passing parameters by value and by address. Selection topics include if/else/else-if, conditional expressions, and switch. Repetition topics include while, do-while, for, and recursion. External file input and output. Arrays, analysis of searching and sorting algorithms, and strings. Pointers and dynamic memory allocation. Students are expected to complete assignments in a collaborative environment. CS 15800 may be used to satisfy College of Science requirement of participation in at least one team-building and collaboration experience. Credit cannot be obtained for both CS 15900 and any of CS 15600, CS 15800 and CS 18000. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201808</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>15900</CourseNumber>
        <CourseShortTitle>C Programming</CourseShortTitle>
        <CourseLongTitle>C Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Fundamental principles, concepts, and methods of programming in C, with emphasis on applications in the physical sciences and engineering. Basic problem solving and programming techniques; fundamental algorithms and data structures; and use of programming logic in solving engineering problems. Students are expected to complete assignments in a collaborative learning environment. Credit cannot be obtained for both CS 15900 and any of CS 15600, CS 15800 and CS 18000. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>16000</CourseNumber>
        <CourseShortTitle>Intro To Comp Sci I</CourseShortTitle>
        <CourseLongTitle>Intro To Comp Sci I</CourseLongTitle>
        <CourseDescription>Credit Hours: 4.00.  An introduction to the fundamental concepts and techniques of Computer Science.  Students will learn to program using an object-oriented language.  They will learn how to translate a real problem into a program description, and how to write and test a program to implement their description.  The emphasis will be on developing a professional style at an elementary level.  CS 16000 will carry syntax as far as interacting classes, arrays of one dimension, and simple file i/o.  Students with no programming background should instead consider CS 11200.  Typically offered Summer Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>4</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>16100</CourseNumber>
        <CourseShortTitle>Intro To Comp Sci II</CourseShortTitle>
        <CourseLongTitle>Intro To Comp Sci II</CourseLongTitle>
        <CourseDescription>Credit Hours: 4.00.  This course continues CS 16000.  Students will design larger programs to solve more complicated problems.  The emphasis is on deepening students' abilities to deal with abstraction, problem decomposition, and the interaction between program components.  Students will develop their professional practice through analysis of more general problems, debugging and testing of their programs, and written presentation of their solutions.  Topics include multidimensional arrays, event-driven programs, GUI's, class inheritance and interfaces, and libraries.  Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201808</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>4</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>17000</CourseNumber>
        <CourseShortTitle>C And Data Structures</CourseShortTitle>
        <CourseLongTitle>C And Data Structures</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The course will introduce the C programming language including the language syntax, the programming environment, basic data types, complex data types (pointer, array, structures, bit fields and unions), macros, i/o, and functions. Program development will emphasize modularization, data abstraction, and selection and analysis of algorithms. Other topics include recursion, files, linked lists, stacks, queues, and binary trees. Course projects are related to common engineering and computer science applications. Course will not count toward graduation in the computer science department. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>17200</CourseNumber>
        <CourseShortTitle>Introduction To C</CourseShortTitle>
        <CourseLongTitle>Introduction To C</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  The course will introduce the C programming language including the language syntax, the programming environment, basic data types, complex data types (pointer, array, structures, bit fields and unions), macros, i/o, and functions. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>17700</CourseNumber>
        <CourseShortTitle>Progrmng With MM Objs</CourseShortTitle>
        <CourseLongTitle>Progrmng With MM Objs</CourseLongTitle>
        <CourseDescription>Credit Hours: 4.00.  Introduction to computers and programming: number representations, primitive data types and operations, basic control structures, programming applets and applications using graphical user interfaces, programming for detecting events and performing actions, processing multimedia objects such as images and sounds.  Throughout the course, examples are drawn from a variety of fields in the natural sciences. Not open to CS majors with a grade of C or better in CS 18000.  Not open to non-CS majors with a grade of C or better in any course in computer programming. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201508</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>4</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>18000</CourseNumber>
        <CourseShortTitle>Prob Solving &amp; O-O Programming</CourseShortTitle>
        <CourseLongTitle>Prob Solving &amp; O-O Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 4.00.  Problem solving and algorithms, implementation of algorithms in a high level programming language, conditionals, the iterative approach and debugging, collections of data, searching and sorting, solving problems by decomposition, the object-oriented approach, subclasses of existing classes, handling exceptions that occur when the program is running, graphical user interfaces (GUIs), data stored in files, abstract data types, a glimpse at topics from other CS courses.  Intended primarily for students majoring in computer sciences. Credit cannot be obtained for both CS 18000 and any of 15600, 15800 and 15900. Not open to students with credit in CS 24000. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>4</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>18200</CourseNumber>
        <CourseShortTitle>Foundations Of Comp Sc</CourseShortTitle>
        <CourseLongTitle>Foundations Of Comp Sc</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Logic and proofs; sets, functions, relations, sequences and summations; number representations; counting; fundamentals of the analysis of algorithms; graphs and trees; proof techniques; recursion; Boolean logic; finite state machines; pushdown automata; computability and undecidability.  Typically offered Spring Fall Summer.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>18300</CourseNumber>
        <CourseShortTitle>Professional Practice I</CourseShortTitle>
        <CourseLongTitle>Professional Practice I</CourseLongTitle>
        <CourseDescription>Credit Hours: 0.00.  Professional Practice.  Permission of instructor required.  Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>COOP</RAPCode>
            <RAPName>Coop</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>FTPV</RAPCode>
            <RAPName>Full-time Privilege</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>18400</CourseNumber>
        <CourseShortTitle>Professional Practice II</CourseShortTitle>
        <CourseLongTitle>Professional Practice II</CourseLongTitle>
        <CourseDescription>Credit Hours: 0.00.  Professional Practice.  Permission of instructor required.  Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>COOP</RAPCode>
            <RAPName>Coop</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>FTPV</RAPCode>
            <RAPName>Full-time Privilege</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>19000</CourseNumber>
        <CourseShortTitle>Topics In Computer Sci</CourseShortTitle>
        <CourseLongTitle>Topics In Computer Sci</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00 to 5.00.  Topics vary. Permission of instructor required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>200901</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>5</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>VART</RAPCode>
            <RAPName>Variable Title</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>19100</CourseNumber>
        <CourseShortTitle>Freshm Resources Semnr</CourseShortTitle>
        <CourseLongTitle>Freshm Resources Semnr</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  This course is intended to integrate freshman majors in computer sciences into the department, help them adjust to university life, and assist them in developing academic and intellectual survival skills. Weekly recitation sections enable the students to work in teams. Strongly recommended for freshmen. The credit may be used only toward free electives. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201901</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>1</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>19300</CourseNumber>
        <CourseShortTitle>Tools</CourseShortTitle>
        <CourseLongTitle>Tools</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  This course is designed to introduce new Computer Science students to various programming tools which will aid them in their Computer Science classes, personal projects, and software development job experiences. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>1</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>19700</CourseNumber>
        <CourseShortTitle>Freshman Honors Semnr</CourseShortTitle>
        <CourseLongTitle>Freshman Honors Semnr</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  A seminar dealing with the history, context, and future of computer science.  Open only to students in the Computer Sciences Honors Program.  The credit may be used only toward free electives. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>HONR</RAPCode>
            <RAPName>Honors</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>20200</CourseNumber>
        <CourseShortTitle>Rpg Programming</CourseShortTitle>
        <CourseLongTitle>Rpg Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  Programming of representative business applications using the RPG (Report Programming Generator) programming language. Emphasis on reports, external data handling and files. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>20300</CourseNumber>
        <CourseShortTitle>Adv Visual Programming</CourseShortTitle>
        <CourseLongTitle>Adv Visual Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course continues the study of visual programming begun in IST 14000. Students will create multi-tier, event-driven applications using object-oriented approaches and databases. Students will also create web applications. Students will also be introduced to data structures. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>20600</CourseNumber>
        <CourseShortTitle>Comp Alg And Prog</CourseShortTitle>
        <CourseLongTitle>Comp Alg And Prog</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Using a computer algebra system to solve mathematics problems, learning how to translate mathematical notation and procedures into the language of the computer algebra system. Learning the basic concepts of programming languages, comparing programming concepts with mathematical concepts. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>22300</CourseNumber>
        <CourseShortTitle>Comp Arch &amp; Assem Lang</CourseShortTitle>
        <CourseLongTitle>Comp Arch &amp; Assem Lang</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  An introduction to the fundamental concepts of computer architecture progressing from the digital logic level to the microarchitecture level and then to the instruction set level. Assembly language and the assembly process will also be included. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>22700</CourseNumber>
        <CourseShortTitle>Introduction To C Programming</CourseShortTitle>
        <CourseLongTitle>Introduction To C Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 2.00.  Introduction to programming in C to solve engineering problems.  Topics covered include primitive data types, control structures, standard input/output, file input/output, mathematic library, procedural programming, problem-solving, user-defined functions, arrays, and pointers.  Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201601</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>2</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>22800</CourseNumber>
        <CourseShortTitle>Object Oriented Program In C++</CourseShortTitle>
        <CourseLongTitle>Object Oriented Program In C++</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  This course will introduce the fundamentals of objected oriented programming in C++.  Students should gain understanding of the implementation of inheritance, composition, method overloading and overriding, polymorphism, templates, and standard template library.  Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>22900</CourseNumber>
        <CourseShortTitle>C/C++ Programming</CourseShortTitle>
        <CourseLongTitle>C/C++ Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 4.00.  This course will introduce the programming in C and fundamentals of object-oriented programming in C++ to solve engineering problems. This course introduces the C programming language features in the beginning of the semester. Topics covered include data types, control structures, standard input/output, file input/output, mathematic library, problem-solving, functions, arrays, dynamic memory, and pointers. Then the course provides an introduction to object-oriented programming using C++ language. Students will gain understanding of data abstractions, classes, inheritance, composition, method overloading and overriding, generic programming, and standard template library. Students are expected to complete lab assignments and several programming assignments. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201508</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>4</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>23200</CourseNumber>
        <CourseShortTitle>Intro to C and Unix</CourseShortTitle>
        <CourseLongTitle>Intro to C and Unix</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course is an introduction to the C language and the Unix operating system.  It presumes fluency in a high-level language.  The course will focus on standard C and Unix tools, rather than a proprietary version of either.  C topics include:  data types, the syntax for arithmetic, logical and relational functions, control functions, scope, communications with the shell, file I/O, pointers, arrays, structs, typedefs, macro and preprocessor functions, and the use of libraries and multiple source files.  Unix topics include the file and directory structures, permissions, shells, standard tools such as history, sort, vi, grep, sed, tar, and make, and simple shell scripting. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>23500</CourseNumber>
        <CourseShortTitle>Intro Organizatnl Comp</CourseShortTitle>
        <CourseLongTitle>Intro Organizatnl Comp</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  People and organizations, decision-making, information systems, telecommunications, desktop systems, integration tools, collaboration and groupware, multimedia, authoring multimedia documents, emerging technologies.  May not be taken for credit by Computer Science majors. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201601</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>24000</CourseNumber>
        <CourseShortTitle>Programming In C</CourseShortTitle>
        <CourseLongTitle>Programming In C</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The UNIX environment, C development cycle, data representation, operators, program structure, recursion, macros, C preprocessor, pointers and addresses, dynamic memory allocation, structures, unions, typedef, bit-fields, pointer/structure applications, UNIX file abstraction, file access, low-level I/O, concurrency.  Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201708</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>24200</CourseNumber>
        <CourseShortTitle>Introduction To Data Science</CourseShortTitle>
        <CourseLongTitle>Introduction To Data Science</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  (STAT 24200) This course provides a broad introduction to the field of data science. The course focuses on using computational methods and statistical techniques to analyze massive amounts of data and to extract knowledge. It provides an overview of foundational computational and statistical tools for data acquisition and cleaning, data management and big data systems. The course surveys the complete data science process from data to knowledge and gives students hands-on experience with tools and methods. Basic knowledge of Python required. Computer Science majors cannot count this course as a degree requirement but can take it for credit as a free elective if taken before CS 37300, 34800, 47100, 47300, 44800. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201901</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>25000</CourseNumber>
        <CourseShortTitle>Computer Architecture</CourseShortTitle>
        <CourseLongTitle>Computer Architecture</CourseLongTitle>
        <CourseDescription>Credit Hours: 4.00.  Digital logic: transistors, gates, and combinatorial circuits; clocks; registers and register banks; arithmetic-logic units; data representation: big-endian and little-endian integers; ones and twos complement arithmetic; signed and unsigned values; Von-Neumann architecture and bottleneck; instruction sets; RISC and CISC designs; instruction pipelines and stalls; rearranging code; memory and address spaces; physical and virtual memory; interleaving; page tables; memory caches; bus architecture; polling and interrupts; DMA; device programming; assembly language; optimizations; parallelism; data pipelining.  Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201405</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>4</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>25100</CourseNumber>
        <CourseShortTitle>Data Structures And Algorithms</CourseShortTitle>
        <CourseLongTitle>Data Structures And Algorithms</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Running time analysis of algorithms and their implementations, one-dimensional data structures, trees, heaps, additional sorting algorithms, binary search trees, hash tables, graphs, directed graphs, weighted graph algorithms, additional topics.  Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201901</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>25200</CourseNumber>
        <CourseShortTitle>Systems Programming</CourseShortTitle>
        <CourseLongTitle>Systems Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 4.00.  Low-level programming; review of addresses, pointers, memory layout, and data representation; text, data, and bss segments; debugging and hex dumps; concurrent execution with threads and processes; address spaces; file names; descriptors and file pointers; inheritance; system calls and library functions; standard I/O and string libraries; simplified socket programming; building tools to help programmers; make and make files; shell scripts and quoting; unix tools including sed, echo, test, and find; scripting languages such as awk; version control; object and executable files (.o and a.out); symbol tables; pointers to functions; hierarchical directories; and DNS hierarchy; programming embedded systems.  Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>4</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>25600</CourseNumber>
        <CourseShortTitle>Appl Software Project</CourseShortTitle>
        <CourseLongTitle>Appl Software Project</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Project course requiring implementation of an integrated application system from a structured design. Emphasis on structured development techniques and on system and user documentation. Other topics include indexed and relative file organization, JCL, Reportwriter, and introduction to information and business systems. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>26000</CourseNumber>
        <CourseShortTitle>Data Structures</CourseShortTitle>
        <CourseLongTitle>Data Structures</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course is an introduction to the common data structures (ADT's) of computer science and the algorithms which maintain and operate on them.  These include arrays, stacks, queues, linked lists, trees, graphs, and more general structures like maps and dictionaries.  The relevant algorithms include additions, deletions, sorts, searches, traversals, and others appropriate to the structure.  The course includes an introduction to the prediction and testing of algorithm performance.  Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>27000</CourseNumber>
        <CourseShortTitle>Assembly Language</CourseShortTitle>
        <CourseLongTitle>Assembly Language</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Computer hardware organization, the fetch-execute cycle, machine language and data representation. Assembly language programming, addressing techniques, input/output, calling conventions, procedures and parameter passing, macros, and conditional assembly. Assembler concepts. Emphasis on the development of well structured programs in assembly language. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>27100</CourseNumber>
        <CourseShortTitle>Computer Architecture</CourseShortTitle>
        <CourseLongTitle>Computer Architecture</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Introduction to computer organization and architecture. Fundamentals of digital logic and representation of numeric and nonnumeric data.  Assembly level organization and programming, including instruction formats, addressing modes, and subprogram call/return.  Design of main memory, cache memory, and virtual memory.  Interrupt basics, interrupt-driven I/O, DMA, and bus protocols.  Processor organization, data paths, the control unit, microprogramming, pipelining, and performance enhancements.  Multiprocessor and alternative architectures. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>27400</CourseNumber>
        <CourseShortTitle>Data Communications</CourseShortTitle>
        <CourseLongTitle>Data Communications</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  A survey of data communication techniques. Topics include communications media, synchronous and asynchronous transmission, coding, error detection and correction, communications protocols and formats, modulation and demodulation, multiplexing and networking, and the OSI model with emphasis on the physical and data link layers. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>27500</CourseNumber>
        <CourseShortTitle>Data Structures</CourseShortTitle>
        <CourseLongTitle>Data Structures</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Data structures describe the way that computer programs organize and store information. This course introduces the specification, representation and manipulation of the basic data structures common to much of computer programming such as: linked lists, arrays, stacks, queues, strings, trees, graphs, search trees, heaps, hash tables, and B-trees. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>28000</CourseNumber>
        <CourseShortTitle>Surv Information Tech</CourseShortTitle>
        <CourseLongTitle>Surv Information Tech</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  An introduction to information technology development from a perspective using business fundamentals that relate to information systems and the analysis and design of those systems.  Topics include competitive, strategic, and technological advantages; collaborative partnerships within e-business; decision making; and databases.  Supply chain management, customer relationship management, enterprise resource planning, and other applications will be surveyed. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>28400</CourseNumber>
        <CourseShortTitle>Professional Practice III</CourseShortTitle>
        <CourseLongTitle>Professional Practice III</CourseLongTitle>
        <CourseDescription>Credit Hours: 0.00.  Professional Practice.  Permission of instruction required.  Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>COOP</RAPCode>
            <RAPName>Coop</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>FTPV</RAPCode>
            <RAPName>Full-time Privilege</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>28401</CourseNumber>
        <CourseShortTitle>Professional Practice Pt-Time</CourseShortTitle>
        <CourseLongTitle>Professional Practice Pt-Time</CourseLongTitle>
        <CourseDescription>Credit Hours: 0.00.  Professional Practice Part-Time.  The instructor determines the adequacy of the student's preparation for the work assignment proposed by the prospective employer for the student.  Permission of Instructor required.  Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201605</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>COOP</RAPCode>
            <RAPName>Coop</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>29000</CourseNumber>
        <CourseShortTitle>Topics In Computer Sci</CourseShortTitle>
        <CourseLongTitle>Topics In Computer Sci</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00 to 5.00.  Topics vary. Permission of instructor required. Typically offered Summer Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201008</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>5</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>VART</RAPCode>
            <RAPName>Variable Title</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>29100</CourseNumber>
        <CourseShortTitle>Soph Developmt Seminar</CourseShortTitle>
        <CourseLongTitle>Soph Developmt Seminar</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  Presentations by corporate partners about careers in computer science.  Presentations by faculty about careers in academia and research.  Students learn about upper-division courses, tour research laboratories, and attend job fairs. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>1</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>29200</CourseNumber>
        <CourseShortTitle>Intermed Tpcs In C S</CourseShortTitle>
        <CourseLongTitle>Intermed Tpcs In C S</CourseLongTitle>
        <CourseDescription>Credit Hours: 2.00 or 3.00.  Intermediate seminar addressing current topics or issues in Computer Science or Information Systems. Typically offered Summer Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201101</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>VART</RAPCode>
            <RAPName>Variable Title</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>29500</CourseNumber>
        <CourseShortTitle>Industrial Practicum</CourseShortTitle>
        <CourseLongTitle>Industrial Practicum</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  Practical problems in local industry limited to about 10 to 20 hours per week for which the student may receive some renumeration. May be repeated but the total combined credit that may be applied to a degree is limited to three. Open only to full-time students. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>30100</CourseNumber>
        <CourseShortTitle>Language Competency</CourseShortTitle>
        <CourseLongTitle>Language Competency</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  A course intended to give the student experience in an additional high-level language. Each section of this course is the responsibility of a particular faculty member who will advise the student and assign programming projects. A student may receive credit for at most three of these sections, but for no section whose language was a major component of a course for which credit has already been attained. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>30200</CourseNumber>
        <CourseShortTitle>Operating Systems</CourseShortTitle>
        <CourseLongTitle>Operating Systems</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  An operating system manages all of the hardware and software resources of a computer. This course provides an introduction to the basic concepts and terminology of operating systems. Topics will include multiprogramming, CPU scheduling, memory management, file systems, concurrent processes, multiprocessors, security, and network operating systems. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>30303</CourseNumber>
        <CourseShortTitle>Intern In CS</CourseShortTitle>
        <CourseLongTitle>Intern In CS</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00 to 3.00. Directed in-service experience with employers that may include but not limited to government agencies, private industry, and community organizations.  Permission of department required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>INTR</RAPCode>
            <RAPName>Internship</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>30600</CourseNumber>
        <CourseShortTitle>Computers In Society</CourseShortTitle>
        <CourseLongTitle>Computers In Society</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Case study analysis of the social impacts of computerization and networking. Topics include computer ethics, crime, privacy, security, reliability, and vulnerability. Other topics include cyberphilia, cyberphobia, censorship, depersonalization, disenfranchisement, automated decision making, artificial intelligence, cognitive science, and ergonomics. Students present projects applying these issues to today's environment. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>30700</CourseNumber>
        <CourseShortTitle>Software Engineerng I</CourseShortTitle>
        <CourseLongTitle>Software Engineerng I</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  An introduction to the methods and tools of software engineering; software life cycle; specification and design of software, software testing, cost and effort estimation; laboratory exercises with design, testing, and other tools. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>30900</CourseNumber>
        <CourseShortTitle>Discrete Math Struct</CourseShortTitle>
        <CourseLongTitle>Discrete Math Struct</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course is the study of finite and discrete mathematical structures relating to the theory of computation. Topics will include directed and undirected graphs and their relation to these structures, combinatorial problems inherent in computation, Boolean algebra, and recurrence relations. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201701</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>31000</CourseNumber>
        <CourseShortTitle>Topics Comp Languages</CourseShortTitle>
        <CourseLongTitle>Topics Comp Languages</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Study of data structures including two-dimensional arrays, pointer variables, linked lists, stacks, queues and trees. Brief introduction to other high-level programming languages. Algorithms for searching and sorting. Recursion. Not open to majors in the department of computer science. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>31400</CourseNumber>
        <CourseShortTitle>Numerical Methods</CourseShortTitle>
        <CourseLongTitle>Numerical Methods</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Iterative methods for solving nonlinear equations; direct and iterative methods for solving linear systems; approximations of functions, derivatives, and integrals; error analysis. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201508</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>31600</CourseNumber>
        <CourseShortTitle>Programming Languages</CourseShortTitle>
        <CourseLongTitle>Programming Languages</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The study of programming language features and their implementation in different types of programming languages. The design goals and motivations for various languages will be discussed. Topics will include a comparison of block-structured, object-oriented, functional, and logic programming languages. The advantages and disadvantages of each type of language will be considered. Specific examples of each type of language will be included. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>32100</CourseNumber>
        <CourseShortTitle>Intro To Comp Graphics</CourseShortTitle>
        <CourseLongTitle>Intro To Comp Graphics</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course is an introductory course in computer graphics. This course introduces fundamental concepts of computer graphics technology and principles to create three-dimensional graphics. Fundamental graphics algorithms are discussed, as well as graphics programming, using a modern graphics standard. Students are expected to complete several programming assignments that implement fundamental computer graphics techniques in the Unix operating system environment. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>33100</CourseNumber>
        <CourseShortTitle>Intro To C++ &amp; OOP</CourseShortTitle>
        <CourseLongTitle>Intro To C++ &amp; OOP</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  An introduction to the C++ language with emphasis on features supporting object oriented programming.  Fundamental data type and operations.  Expression evaluation.   Selection and iteration constraints.  Functions, procedures, and macro.  Standard libraries.  Classes:  declaration and definition; instances; member functions; constructors and destructors; function overloading; inheritance and polymorphism.  Stream input and output.  Using classes to encapsulate data structure and implementation details. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>33200</CourseNumber>
        <CourseShortTitle>Algorithms</CourseShortTitle>
        <CourseLongTitle>Algorithms</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  An algorithm is a procedure for solving a problem in a finite number of steps. Algorithms, along with data structures, form the fundamental building blocks of computer programs. The types of algorithms discussed will include sorting, searching, probabilistic, graph, and geometric algorithms. The following algorithm techniques are covered: backtracking, divide and conquer, branch and bound, greedy method, and dynamic programming. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>33400</CourseNumber>
        <CourseShortTitle>Fund Of Computer Graph</CourseShortTitle>
        <CourseLongTitle>Fund Of Computer Graph</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Fundamental principles and techniques of computer graphics.  The course covers the basics of going from a scene representation to a raster image using OpenGL.  Specific topics include coordinate manipulations, perspective, basics of illumination and shading, color models, texture maps, clipping and basic raster algorithms, fundamentals of scene constructions. C S 314 is recommended. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201405</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>34200</CourseNumber>
        <CourseShortTitle>Comp Bio-Med Image An</CourseShortTitle>
        <CourseLongTitle>Comp Bio-Med Image An</CourseLongTitle>
        <CourseDescription>Credit Hours: 4.00.  Introduction to image, manipulation and analysis. Biomedical materials to be analyzed include electrophoretic gels, bacterial agar plates, cells and tissues, x-ray films and CAT scan images. Personal computer systems and the basic programming skill of the C language also will be introduced. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>4</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>34800</CourseNumber>
        <CourseShortTitle>Information Systems</CourseShortTitle>
        <CourseLongTitle>Information Systems</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  File organization and index structures; object-oriented database languages; the relational database model with introductions to SQL and DBMS; hierarchical models and network models with introductions to HDDL, HDML, and DBTG Codasyl; data mining; data warehousing; database connectivity; distributed databases; the client/server paradigm; middleware, including ODBC, JDBC, CORBA, and MOM. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>35000</CourseNumber>
        <CourseShortTitle>Prog Language Design</CourseShortTitle>
        <CourseLongTitle>Prog Language Design</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  A survey of language design issues and their implications for translation and run-time support. Examination of modern programming languages and features: Abstract data and control structures, procedures, parameter passing mechanisms, block structuring and scope rules, input/output, concurrent execution and storage management. Models of run time behavior. Comparison of imperative and declarative programming languages. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>35200</CourseNumber>
        <CourseShortTitle>Compilers Prin &amp; Pract</CourseShortTitle>
        <CourseLongTitle>Compilers Prin &amp; Pract</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Should not be taken concurrently with CS 354. The theory and practice of programming language translation, compilation, and run-time systems, organized around a significant programming project to build a compiler for a simple but nontrivial programming language. Modules, interfaces, tools. Data structures for tree languages. Lexical analysis, syntax analysis, abstract syntax. Symbol tables, semantic analysis. Translation, intermediate code, basic blocks, traces. Instruction selection, CISC and RISC machines. Liveness analysis, graph coloring register allocation. Supplemental material drawn from garbage collection, object-oriented languages, higher-order languages, dataflow analysis, optimization, polymorphism, scheduling and pipelining, memory hierarchies. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>35300</CourseNumber>
        <CourseShortTitle>Prin Concurrency &amp; Parallelism</CourseShortTitle>
        <CourseLongTitle>Prin Concurrency &amp; Parallelism</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Important concepts, models, algorithms, abstractions, and implementation aspects of concurrent and parallel programs. Topics include: techniques used to describe concurrent programs (e.g., threads, events, co-routines, continuations), abstractions for shared-memory and message-passing programs, relaxed memory models, livelock and deadlock detection, lock-free algorithms, data races and atomicity, scheduling techniques, process calculi, and software transactions. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201905</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>35400</CourseNumber>
        <CourseShortTitle>Operating Systems</CourseShortTitle>
        <CourseLongTitle>Operating Systems</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Should not be taken concurrently with CS 35200. Introduction to operating systems. Computer system and operating system architectures, processes, inter-process communication, inter-process synchronization, mutual exclusion, deadlocks, memory hierarchy, virtual memory, CPU scheduling, file systems, I/O device management, security. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201905</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>35500</CourseNumber>
        <CourseShortTitle>Intro To Cryptography</CourseShortTitle>
        <CourseLongTitle>Intro To Cryptography</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  An introduction to cryptography basics: Classic historical ciphers including Caesar, Vigenere and Vernam ciphers; modern ciphers including DES, AES, Pohlig-Hellman, and RSA; signatures and digests; key exchange; simple protocols; block and stream ciphers; network-centric protocols. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>36000</CourseNumber>
        <CourseShortTitle>Software Engineering</CourseShortTitle>
        <CourseLongTitle>Software Engineering</CourseLongTitle>
        <CourseDescription>Credit Hours: 4.00. An introduction to software engineering using an object-oriented approach. The software development process. Iterative and incremental development. Team organization and project management. Object-oriented analysis and design. Representation of software models using UML; use cases, class and interaction diagram. Metrics for design evaluation. Software quality assurance. Testing planning and specification; unit and integration test methods. Software tools for analysis and design. Ethics and professionalism. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>4</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>36400</CourseNumber>
        <CourseShortTitle>Intro To Database Sys</CourseShortTitle>
        <CourseLongTitle>Intro To Database Sys</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Theory and application of database systems for information organization and retrieval based on the relational model. Includes database models, query languages, data dependencies, normal forms, and database design. Projects include use of commercial mainframe and microcomputer databases. Typically offered Summer Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>36500</CourseNumber>
        <CourseShortTitle>Advanced Database Sys</CourseShortTitle>
        <CourseLongTitle>Advanced Database Sys</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The first part of the course includes theory of SQL, implementation of some components of DBMS, and comprehensive project. The second part of the course includes such advanced topics as recovery; concurrency; and distributed, deductive, and knowledge databases. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>36600</CourseNumber>
        <CourseShortTitle>Struct Analysis Tech</CourseShortTitle>
        <CourseLongTitle>Struct Analysis Tech</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Methods used in analyzing information systems. Topics include user interviewing and observation, event analysis, data flow diagrams, data dictionaries, mini-specifications, decision trees, decision tables, and both logical and physical models. Students practice these techniques in a major structured analysis project resulting in a requirements specification document. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>36700</CourseNumber>
        <CourseShortTitle>Struct Design Techniq</CourseShortTitle>
        <CourseLongTitle>Struct Design Techniq</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Methods used in designing information systems. Topics include structure charts, module specifications, pseudocode, coupling, cohesion, transform analysis, transaction analysis, and user interface design. Includes the detailed design of an information system and the implementation of a prototype of that design. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>36800</CourseNumber>
        <CourseShortTitle>Human Comp Interaction</CourseShortTitle>
        <CourseLongTitle>Human Comp Interaction</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Introduction to general issues surrounding human-computer interaction (HCI).  The course presents principles, design methodologies, tools, and evaluation techniques with an emphasis on human-centered interface design and implementation.  Other issues covered include HCI aspects of multimedia systems, World Wide Web, computer-supported cooperative work, and recent paradigms of HCI. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201601</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>37000</CourseNumber>
        <CourseShortTitle>Systems Programming</CourseShortTitle>
        <CourseLongTitle>Systems Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Design and operation of systems programs including assemblers, loaders, linkers and macroprocessors. Issues in language translation; expression evaluation, forward referencing, symbol table manipulation, data conversion and code generation. Lexical and syntactic analysis. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>37200</CourseNumber>
        <CourseShortTitle>Web App Development</CourseShortTitle>
        <CourseLongTitle>Web App Development</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Introduction to web application development.  Characteristics of web and application servers; web engineering principles and application architectures; web page construction; client and server-side scripting; database interaction; web application deployment and management; security and performance issues; overview of application-layer protocols. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>37300</CourseNumber>
        <CourseShortTitle>Data Mining &amp; Machine Learning</CourseShortTitle>
        <CourseLongTitle>Data Mining &amp; Machine Learning</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course will introduce students to the field of data mining and machine learning, which sits at the interface between statistics and computer science. Data mining and machine learning focuses on developing algorithms to automatically discover patterns and learn models of large datasets. This course introduces students to the process and main techniques in data mining and machine learning, including exploratory data analysis, predictive modeling, descriptive modeling, and evaluation. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201901</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>37400</CourseNumber>
        <CourseShortTitle>Computer Networks</CourseShortTitle>
        <CourseLongTitle>Computer Networks</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The design and implementation of data communications networks. Topics include network topologies; message, circuit and packet switching; broadcast, satellite and local area networks; routing; the OSI model with emphasis on the network, transport and session layers. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>37500</CourseNumber>
        <CourseShortTitle>Multimedia Networking</CourseShortTitle>
        <CourseLongTitle>Multimedia Networking</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course is a survey of multimedia networks. Topics include multimedia information representation, text and image compression, audio and video compression, multimedia networking. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>37600</CourseNumber>
        <CourseShortTitle>Computer Architecture</CourseShortTitle>
        <CourseLongTitle>Computer Architecture</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  A comparative study of computer systems and hardward organization. Topics include processor and memory organization, microprogramming, architectural support for operating systems and high-level languages and I/O organization. Examples of representative architectures. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>38000</CourseNumber>
        <CourseShortTitle>Artificial Intelligence</CourseShortTitle>
        <CourseLongTitle>Artificial Intelligence</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Fundamental concepts and techniques of artificial intelligence.  Search techniques, including local search and constraint satisfaction.  Knowledge representation concepts and methods of reasoning.  Software agents, machine learning and neural networks, and AI planning systems. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>38001</CourseNumber>
        <CourseShortTitle>C++ Programming</CourseShortTitle>
        <CourseLongTitle>C++ Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  This course builds on the CS 24000 (Programming In C) course to teach C++ extensions. This 5-week one-credit course teaches C++ programming and helps students improve their understanding of object-oriented programming. It also teaches how to use an Integrated Development Environment (IDE) when programming in C++. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201708</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>38002</CourseNumber>
        <CourseShortTitle>Advanced Java Programming</CourseShortTitle>
        <CourseLongTitle>Advanced Java Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  This course builds on the Java course CS 18000 (Problem Solving And Object Oriented Programming) to teach advanced topics in Java. This 5-week one-credit course will teach advanced topics such as Network Programming in Java, JDBC, JNI, and J2EE to write web applications in Java. You will also improve your understanding of Object Oriented Programming. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201708</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>38003</CourseNumber>
        <CourseShortTitle>Python Programming</CourseShortTitle>
        <CourseLongTitle>Python Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  This course teaches the Python programming language assuming that students have already taken a course in computer programming. This 5-week one-credit course teaches the Python language, the most common modules used in Python, as well as how to write Python web applications. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201905</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>38100</CourseNumber>
        <CourseShortTitle>Intro Analysis Algor</CourseShortTitle>
        <CourseLongTitle>Intro Analysis Algor</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Techniques for analyzing the time and space requirements of algorithms. Application of these techniques to sorting, searching, pattern-matching, graph problems, and other selected problems. Brief introduction to the intractable (NP-hard) problems. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>38400</CourseNumber>
        <CourseShortTitle>Numerical Analysis</CourseShortTitle>
        <CourseLongTitle>Numerical Analysis</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Iterative methods for solving nonlinear equations; direct and iterative methods for solving linear systems; interpolation and extrapolation; approximation of derivatives, integrals and functions; numerical techniques for ordinary differential equations; error analysis. Use of mathematical subroutine libraries. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>38600</CourseNumber>
        <CourseShortTitle>Professional Practice IV</CourseShortTitle>
        <CourseLongTitle>Professional Practice IV</CourseLongTitle>
        <CourseDescription>Credit Hours: 0.00.  Professional Practice.  Permission of instructor required.  Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>COOP</RAPCode>
            <RAPName>Coop</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>FTPV</RAPCode>
            <RAPName>Full-time Privilege</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>39000</CourseNumber>
        <CourseShortTitle>Topics In Computer Sci</CourseShortTitle>
        <CourseLongTitle>Topics In Computer Sci</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00 to 5.00.  Topics vary. Permission of instructor required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>5</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>VART</RAPCode>
            <RAPName>Variable Title</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>39100</CourseNumber>
        <CourseShortTitle>Junior Resources Semnr</CourseShortTitle>
        <CourseLongTitle>Junior Resources Semnr</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  This seminar course engages a number of outside speakers who typically present information on the role of research in computer science, how the research components of computer science relate to each other, approaches to software development in industry, different types of application development paradigms, technological trends, and societal, ethical, and legal issues. The credit may be used only toward free electives. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>1</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>39500</CourseNumber>
        <CourseShortTitle>Industr Practicum I</CourseShortTitle>
        <CourseLongTitle>Industr Practicum I</CourseLongTitle>
        <CourseDescription>Credit Hours: 0.00 to 3.00.  Practical problems in local industry limited to about 10-20 hours per week. May be repeated, but the total combined credit that may be applied to a degree is limited to six. Open only to full-time students. Permission of the department is required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>200801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>COOP</RAPCode>
            <RAPName>Coop</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>39700</CourseNumber>
        <CourseShortTitle>Honors Seminar</CourseShortTitle>
        <CourseLongTitle>Honors Seminar</CourseLongTitle>
        <CourseDescription>Credit Hours: 0.00.  A seminar for all sophomores, juniors, and seniors in the Computer Sciences Honors Program. Meets eight times each semester under the supervision of the Honors coordinator. The meetings focus on honors research projects, helping students to identify appropriate projects and form groups, and providing a forum for juniors and seniors to report on their projects as required in the honors program. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>200801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>HONR</RAPCode>
            <RAPName>Honors</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>40400</CourseNumber>
        <CourseShortTitle>Distributed Systems</CourseShortTitle>
        <CourseLongTitle>Distributed Systems</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  A distributed system is two or more computers working together as a single unit. These systems are essential to the understanding of present and future computer applications. This course will include the following topics: concurrent processing, threads, network programming, distributed file systems, remote procedure calls, sockets, distributed objects, client-server models, and Internet protocols. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>40700</CourseNumber>
        <CourseShortTitle>Software Engr Senior Project</CourseShortTitle>
        <CourseLongTitle>Software Engr Senior Project</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  A capstone course combining all the concepts students have learned in the Software Engineering Track: software and software engineering, working as a team leader and as a team member, Agile Software Development, Scrum Software Development, Version Control, basing software development on reusable technology, developing requirements (User Stories and Use Cases), modelling with classes, design patterns, focusing on users, modelling interactions and behavior, architecting and designing software, testing and inspecting, managing the software development process.  This is a project course.  Students are organized into 4-6 student teams.  Each team completes a full-semester software engineering project.  Each team creates a Project Charter, Product Backlog, Design, and for 3 Sprints -- Planning Document, Demo, Retrospective Document.  The final demo is a formal presentation. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201701</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>40800</CourseNumber>
        <CourseShortTitle>Software Testing</CourseShortTitle>
        <CourseLongTitle>Software Testing</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00. Preliminaries: errors and testing; software quality, requirements, behavior, and correctness; testing, debugging, verification; control flow graphs, dominators; types of testing; Test selection: from requirements, finite state models, and combinatorial designs; regression testing and test minimization; Test adequacy assessment: control and data flow; mutation based; testing tools. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>41000</CourseNumber>
        <CourseShortTitle>Automat &amp; Computabilty</CourseShortTitle>
        <CourseLongTitle>Automat &amp; Computabilty</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  A finite automaton is a mathematical model for a computational system. Computer science embodies many examples of finite state systems. This course will cover the basic principles of deterministic and non-deterministic finite automata, Turing machines, formal language theory, regular expressions, context-free grammers, the halting problem, and unsolvability. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>41600</CourseNumber>
        <CourseShortTitle>Software Engineering</CourseShortTitle>
        <CourseLongTitle>Software Engineering</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Software engineering is the study of the theory, methods, and tools which are needed to develop large, complex software systems.  This course covers the specifications, design, documentation, implementation, and testing of software systems.  Software life cycles, principles of project management, and case studies are covered.  A group project will be assigned. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>42000</CourseNumber>
        <CourseShortTitle>Senior Design Project</CourseShortTitle>
        <CourseLongTitle>Senior Design Project</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The objectives of this course is to provide students with concrete experience in writing advanced computer programs for practical application in science or industry.  The student develops necessary software using appropriate techniques and prepares documentation for the use and support of the completed system. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>42100</CourseNumber>
        <CourseShortTitle>Advanced Comp Graphics</CourseShortTitle>
        <CourseLongTitle>Advanced Comp Graphics</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Advanced topics in computer graphics such as three-dimensional rendering, curve and surface design, anti-aliasing, animation, and visualization.  Other topics will be selected depending on current research trends.  Through development of projects, students will gain practical experience about modern computer graphics. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>42200</CourseNumber>
        <CourseShortTitle>Computer Networks</CourseShortTitle>
        <CourseLongTitle>Computer Networks</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Undergraduate-level introduction to computer networks and data communication. Low-level details of media, signals, and bits: time division and frequency division multiplexing; encoding; modulation; bandwidth, throughput, and noise. Packet transmission: Local Area Network (Ethernet, FDDI) and Wide Area Network technologies (ATM); wireless networks; network interconnection with repeaters, bridges, and switches; DSU/CSU; xDSL and cable modems. Internetworking: router-based architecture; IP addressing; address binding with ARP; datagram encapsulation and fragmentation; UDP and TCP, retransmission; protocol ports; ICMP and error handling. Network applications: client/server concept; port demultiplexing; program interface to protocols (API); use by clients and servers; domain name system; TELNET; Web technologies including HTTP, CGI, Java; RPC and middleware; network management. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201905</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>42600</CourseNumber>
        <CourseShortTitle>Computer Security</CourseShortTitle>
        <CourseLongTitle>Computer Security</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  A survey of the fundamentals of information security. Risks and vulnerabilities, policy formation, controls and protection methods, database security, encryption, authentication technologies, host-based and network-based security issues, personnel and physical security issues, issues of law and privacy. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201905</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>43400</CourseNumber>
        <CourseShortTitle>Adv Computer Graphics</CourseShortTitle>
        <CourseLongTitle>Adv Computer Graphics</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Advanced concepts and techniques of computer graphics.  The course covers, in complete detail, going from a scene representation to a raster image without using OpenGL or other graphics packages.  The course develops a complete graphics implementation in which the students implement every aspect of the graphics pipeline.  This involves a substantial software project in C/C++. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>44200</CourseNumber>
        <CourseShortTitle>Database Systems</CourseShortTitle>
        <CourseLongTitle>Database Systems</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  A database is a system whose purpose is to organize, retrieve, and maintain large amounts of information.  This course introduces the concepts and structures used in designing and implementing database systems.  Topics include hierarchical network, relational, and object-oriented data models, database design principles, normalization, data dictionaries, query languages and processing. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>44500</CourseNumber>
        <CourseShortTitle>Computer Security</CourseShortTitle>
        <CourseLongTitle>Computer Security</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  A survey of the fundamentals of computer security.  Topics include risks and vulnerabilities, policy formation, controls and protection methods, survey of malicious logic, database security, encryption, authentication, intrusion detection, network and system security issues, personnel and physical security issues, security design principles, issues of law and privacy. Typically offered Summer Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>44800</CourseNumber>
        <CourseShortTitle>Intro Relational Db Sy</CourseShortTitle>
        <CourseLongTitle>Intro Relational Db Sy</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  An in-depth examination of relational database systems including theory and concepts as well as practical issues in relational databases. Modern database technologies such as object-relational and Web-based access to relational databases. Conceptual design and entity relationship modeling, relational algebra and calculus, data definition and manipulation languages using SQL, schema and view management, query processing and optimization, transaction management, security, privacy, integrity management. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201405</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>45500</CourseNumber>
        <CourseShortTitle>Computer Graphics</CourseShortTitle>
        <CourseLongTitle>Computer Graphics</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Computer graphics provides a mechanism for creating and manipulating images by means of a computer.  This course covers two-dimensional curve drawing, view transformations, geometric modeling, projects, ray tracing, surface patch, three-dimensional object rendering, shading, and animation.  Windows programming using OpenGL and MFC will also be introduced. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>45600</CourseNumber>
        <CourseShortTitle>Programming Languages</CourseShortTitle>
        <CourseLongTitle>Programming Languages</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Concepts for structuring data, computation, and whole programs. Object-oriented languages, functional languages, logic- and rule-based languages. Data types, type checking, exception handling, concurrent processes, synchronization, modularity, encapsulation, interfaces, separate compilation, inheritance, polymorphism, dynamic binding, subtyping, overloading, beta-reduction, unification. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>45700</CourseNumber>
        <CourseShortTitle>Introduction To Data Mining</CourseShortTitle>
        <CourseLongTitle>Introduction To Data Mining</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Data mining refers to the process of automatic discovery of patterns and knowledge from large data sets. As an introductory course on data mining, this course presents the knowledge discovery process, and introduces data preprocessing and exploration, major data mining tasks, the relevant methodologies and techniques, and data mining applications from different disciplines. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201808</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>46000</CourseNumber>
        <CourseShortTitle>Senior Capstone Project I</CourseShortTitle>
        <CourseLongTitle>Senior Capstone Project I</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The first course of a two-semester sequence. Student teams will participate in the development of a substantial application-oriented or research-oriented software project utilizing a formal software process model. Emphasis on teamwork, project management, and oral and written communication. Student teams will conduct review activities and develop artifacts appropriate for the software project and process model chosen. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>46200</CourseNumber>
        <CourseShortTitle>Intro Artfcl Intlgnce</CourseShortTitle>
        <CourseLongTitle>Intro Artfcl Intlgnce</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Basic problem-solving strategies, heuristic search, problem reduction and AND/OR graphs, knowledge representation, expert systems, generating explanations, uncertainty reasoning, game playing, planning, machine learning, computer vision, and programming systems such as LISP or PROLOG. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>46400</CourseNumber>
        <CourseShortTitle>Computer Sys Planning</CourseShortTitle>
        <CourseLongTitle>Computer Sys Planning</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The planning and design of computer systems, including the formulation of corporate requirements, configuration of hardware to satisfy stated requirements, comparison and evaluation of equipment, installation considerations and implementation procedures. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>46500</CourseNumber>
        <CourseShortTitle>Senior Capstone Project II</CourseShortTitle>
        <CourseLongTitle>Senior Capstone Project II</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00. The second course of a two-semester sequence. Student teams will complete the development of a substantial application-oriented or research-oriented software project begun in CS 46000. Emphasis on teamwork, project management, and oral and written communication. Student teams will conduct review activities and develop artifacts appropriate for the software project and process model chosen. Students will be required to conduct a final formal review and demonstration to project stakeholders and other interested persons. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>46600</CourseNumber>
        <CourseShortTitle>Strat Iss Infor Systms</CourseShortTitle>
        <CourseLongTitle>Strat Iss Infor Systms</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Topics in information systems management including strategic planning for competitive advantage, chargeback, systems portfolio risk analysis, security, and assimilating technology advances. Students develop an information systems strategic plan. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>46700</CourseNumber>
        <CourseShortTitle>Project Management</CourseShortTitle>
        <CourseLongTitle>Project Management</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Covers the techniques required to manage systems development. Topics include project proposals, planning, estimating, organizing, controlling, and completion. Students practice these techniques on a major project using project management software. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201808</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>47100</CourseNumber>
        <CourseShortTitle>Intr To Artifcl Intlgn</CourseShortTitle>
        <CourseLongTitle>Intr To Artifcl Intlgn</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Students are expected to spend at least three hours per week gaining experience with artificial intelligence systems and developing software.  Basic problem-solving strategies, heuristic search, problem reduction and AND/OR graphs, knowledge representation, expert systems, generating explanations, uncertainty reasoning, game playing, planning, machine learning, computer vision, and programming systems such as Lisp or Prolog.  Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>47200</CourseNumber>
        <CourseShortTitle>Opr Systems Design</CourseShortTitle>
        <CourseLongTitle>Opr Systems Design</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The design and implementation of modern multiprocessing operating systems. Topics include concurrent programming, real and virtual storage allocation, resource allocation and deadlock prevention and avoidance, job scheduling, and analytic modeling. Students will complete projects involving concurrency and implement a portion of a multiprocessing operating system. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>47300</CourseNumber>
        <CourseShortTitle>Web Info Search &amp; Management</CourseShortTitle>
        <CourseLongTitle>Web Info Search &amp; Management</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00. This course teaches important concepts and knowledge of information retrieval for managing unstructured data such as text data on Web or in emails. At the same time, students will be exposed to a large number of important applications. Students in the course will get hands on experience from homework and a course project. The first part of the course focuses on general concepts/techniques such as stemming, indexing, vector space model, and feedback procedure. The second part of the course shows how to apply the set of techniques on different applications such as Web search, text categorization, and information recommendation. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201908</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>47400</CourseNumber>
        <CourseShortTitle>Compiler Construction</CourseShortTitle>
        <CourseLongTitle>Compiler Construction</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Techniques for the syntax-directed translation of modern high-level languages. Topics include: grammars and language specification, language design issues, lexical analysis, LL and LR parsing techniques, semantics, symbol table design, code generation and local optimization. Students are required to implement a compiler for a subset of a structured high-level language such as Pascal or Ada. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201601</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>47800</CourseNumber>
        <CourseShortTitle>Intro Bioinformatics</CourseShortTitle>
        <CourseLongTitle>Intro Bioinformatics</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  (BIOL 47800) Bioinformatics is broadly defined as the study of molecular biological information, targeting particularly the enormous volume of DNA sequence and functional complexity embedded in entire genomes. Topics will include understanding the evolutionary organization of genes (genomics), the structure and function of gene products (proteomics), and the dynamics of gene expression in biological processes (transcriptomics). Inherently, bioinformatics is interdisciplinary, melding various applications of computational science with biology. This jointly taught course introduces analytical methods from biology, statistics and computer science that are necessary for bioinformatics investigations. The course is intended for junior and senior undergraduates from various science backgrounds. Our objective is to develop the skills of both tool users and tool designers in this important new field of research.
 Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201405</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>48000</CourseNumber>
        <CourseShortTitle>Practicum In C S</CourseShortTitle>
        <CourseLongTitle>Practicum In C S</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The practicum course consists of a small team (faculty adviser and 1 to 4 students) working on a real problem obtained in conjunction with business or industry.  Not more than two terms of MA 480 and/or C S 480 may be taken for credit. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>48300</CourseNumber>
        <CourseShortTitle>Theory Of Computation</CourseShortTitle>
        <CourseLongTitle>Theory Of Computation</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Turing machines and the Church-Turing thesis; decidability; halting problem; reducibility; undecidable problems; decidability of logical theories; Kolmogorov complexity; time classes; P, NP, NP-complete; space classes; Savitch's theorem, PSPACE-completeness, NL-completeness; hierarchy theorems; approximation theorems; probabilistic algorithms; applications of complexity to parallel computation and cryptography. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201508</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>48600</CourseNumber>
        <CourseShortTitle>Analysis Of Algorithms</CourseShortTitle>
        <CourseLongTitle>Analysis Of Algorithms</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Techniques for analyzing the time and space requirements of algorithms and problems. Application of these techniques to sorting, searching, pattern- matching, graph problems and other selected problems. Brief introduction to the intractable (NP-hard) problems. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>48700</CourseNumber>
        <CourseShortTitle>Professional Practice V</CourseShortTitle>
        <CourseLongTitle>Professional Practice V</CourseLongTitle>
        <CourseDescription>Credit Hours: 0.00.  Professional Practice.  Permission of instructor required.  Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>COOP</RAPCode>
            <RAPName>Coop</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>FTPV</RAPCode>
            <RAPName>Full-time Privilege</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>48800</CourseNumber>
        <CourseShortTitle>Theory Of Computation</CourseShortTitle>
        <CourseLongTitle>Theory Of Computation</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Mathematical models of computation including finite and pushdown automata and Turing machines and equivalence of different general-purpose models. Grammars and their relation to automata, Church's Thesis and limits of computation. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>48900</CourseNumber>
        <CourseShortTitle>Embedded Systems</CourseShortTitle>
        <CourseLongTitle>Embedded Systems</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Software for embedded systems; programming with extreme constraints on memory, storage, and processing power; programming models, including synchronous, asynchronous, and concurrent; programming systems that run forever; use of Finite State Machines (FSMs); review of embedded hardware and available boards; asynchronous and synchronous serial connections (e.g., RS232 and SPI); General Purpose I/O (GPIO) pins; relays, servos, and other peripherals; design for low power; battery characteristics; systems that communicate over computer networks and the Internet; current industry practices; design of embedded projects; working in teams.  CS 35200 (Compilers) and CS 35400 (Operating Systems) are recommended, but not required. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201905</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>49000</CourseNumber>
        <CourseShortTitle>Topics In CS For Ung</CourseShortTitle>
        <CourseLongTitle>Topics In CS For Ung</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00 to 5.00.  Supervised reading and reports in various fields. Permission of instructor required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>5</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>CREX</RAPCode>
            <RAPName>Credit By Exam</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>VART</RAPCode>
            <RAPName>Variable Title</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>49200</CourseNumber>
        <CourseShortTitle>Topics In CS</CourseShortTitle>
        <CourseLongTitle>Topics In CS</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Seminar addressing current topics or issues in computer science or information systems. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>VART</RAPCode>
            <RAPName>Variable Title</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>49400</CourseNumber>
        <CourseShortTitle>Directed Study</CourseShortTitle>
        <CourseLongTitle>Directed Study</CourseLongTitle>
        <CourseDescription>Credit Hours:  1.00 to 3.00.  Independent study for students who desire to execute a complete computer- oriented project.  Course may be repeated for credit up to nine hours toward graduation.  Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>200801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>VART</RAPCode>
            <RAPName>Variable Title</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>49500</CourseNumber>
        <CourseShortTitle>Cooperative Experience</CourseShortTitle>
        <CourseLongTitle>Cooperative Experience</CourseLongTitle>
        <CourseDescription>Credit Hours: 0.00 to 3.00.  For cooperative program students only. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>200801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>COOP</RAPCode>
            <RAPName>Coop</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>FTPV</RAPCode>
            <RAPName>Full-time Privilege</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>49700</CourseNumber>
        <CourseShortTitle>Honors Research Projct</CourseShortTitle>
        <CourseLongTitle>Honors Research Projct</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  One semester of the project may be counted as one of the seven computer science courses at or above the 300 level required for the bachelor's degree. One more semester, if approved by the honors coordinator, can be used as a free elective. A group research project directed by Computer Sciences faculty members. Each group must submit a technical report describing its work and the results obtained. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>HONR</RAPCode>
            <RAPName>Honors</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>50010</CourseNumber>
        <CourseShortTitle>Fndnl Principles Info Security</CourseShortTitle>
        <CourseLongTitle>Fndnl Principles Info Security</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course covers foundational principles relevant to information security including data structures, algorithm design, computational complexity, probability theory, number theory, and basics of cryptography. This course is restricted to CS graduate students. This course is required for students in the Master of Science in Computer Science Concentration in Information Security for Professionals Program. The course may not be used on the Plan of Study for any CS graduate students other than those in the Concentration in Information Security for Professionals program. Programming experience and computer science knowledge equivalent to that of a minor in CS. Incoming students are expected to have programming skills in at least one procedural programming languages, e.g., C,C++,Java, or Python. Typically offered Summer.</CourseDescription>
        <CourseEffectiveDate>201605</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>50011</CourseNumber>
        <CourseShortTitle>Intr Systems For Info Security</CourseShortTitle>
        <CourseLongTitle>Intr Systems For Info Security</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The course covers computer systems principles relevant to information security and it serves as a prerequisite for the later courses in the MS in IS program. The material includes features in the C/C++ programming languages for understanding security-critical software vulnerabilities, basic knowledge in computer architecture and assembly languages, knowledge of the compiling process, operating systems, networking, databases, and web applications relevant to information security. This course is restricted to CS graduate students. This course is required for students in the Master of Science in Computer Science Concentration in Information Security for Professionals Program. The course may not be used on the Plan of Study for any CS graduate students other than those in the Concentration in Information Security for Processionals program. Programming experience and computer science knowledge equivalent to that of a minor in CS. Incoming students are expected to have programming skills in at least one procedural programming languages, e.g., C,C++,Java, or Python. Typically offered Fall Summer.</CourseDescription>
        <CourseEffectiveDate>201901</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>50100</CourseNumber>
        <CourseShortTitle>Computing For Sci And Engrng</CourseShortTitle>
        <CourseLongTitle>Computing For Sci And Engrng</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Credit in this course may not be used toward a graduate degree in Computer Sciences.  Computational concepts, tools, and skills for computational science and engineering scripting for numerical computing, scripting for file processing, high performance computing, and software development.  Project may be required.  Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>50200</CourseNumber>
        <CourseShortTitle>Compil &amp; Progr Systms</CourseShortTitle>
        <CourseLongTitle>Compil &amp; Progr Systms</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Basic principles of compilers and compiler design; control of translation, loading, and execution; symbolic coding systems; lexical and syntactic analysis, design and operation of assemblers and macroprocessors; design of interpretive systems. Students are expected to complete a large programming project as part of the course. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>50300</CourseNumber>
        <CourseShortTitle>Operating Systems</CourseShortTitle>
        <CourseLongTitle>Operating Systems</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Basic principles of operating systems: addressing modes, indexing, relative addressing, indirect addressing, stack maintenance; implementation of multitask systems; control and coordination of tasks, deadlocks, synchronization, mutual exclusion; storage management, segmentation, paging, virtual memory; protection, sharing, access control; file systems; resource management; evaluation and prediction of performance. Students are expected to spend at least three hours per week gaining hands-on experience in using and modifying a small operating system. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>50500</CourseNumber>
        <CourseShortTitle>Distributed Systems</CourseShortTitle>
        <CourseLongTitle>Distributed Systems</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Foundations for building reliable distributed systems, including failure and system models, and basic communication and agreement problems; crash failures, recovery, partition, Byzantine failures; asynchronous systems, failure detectors, communication channels, wireless and sensor networks; software clocks, causality, and cuts. Examples of problems include reliable broadcast consensus, leader election, group communication, and replication.  Permission of department required.  Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201408</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>51000</CourseNumber>
        <CourseShortTitle>Software Engineering</CourseShortTitle>
        <CourseLongTitle>Software Engineering</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Software life cycles, requirements engineering, software design, design of distributed systems, verification and validation, software architecture, process metrics and models, and research methods in software engineering. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>51400</CourseNumber>
        <CourseShortTitle>Numerical Analysis</CourseShortTitle>
        <CourseLongTitle>Numerical Analysis</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  (MA 51400)  AIternative methods for solving nonlinear equations; linear difference equations, applications to solution of polynomial equations; differentiation and integration formulas; numerical solution of ordinary differential equations; roundoff error bounds. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>51500</CourseNumber>
        <CourseShortTitle>Numerical Linear Algeb</CourseShortTitle>
        <CourseLongTitle>Numerical Linear Algeb</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Direct and iterative solvers of dense and sparse linear systems of equations, numerical schemes for handling symmetric algebraic eigenvalue problems, and the singular-value decomposition and its applications in linear least squares problems. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>51501</CourseNumber>
        <CourseShortTitle>Parallelism Numer Linear Alg</CourseShortTitle>
        <CourseLongTitle>Parallelism Numer Linear Alg</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course examines both theoretical and practical aspects of numerical algorithm design and implementation on parallel computing platforms. In particular, it provides an understanding of the tradeoff between arithmetic complexity and management of hierarchical memory structures, roundoff characteristics if different from the sequential schemes, and performance evaluation and enhancement. Applications are derived from a variety of computational science and engineering areas.  Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>51510</CourseNumber>
        <CourseShortTitle>Algorithms</CourseShortTitle>
        <CourseLongTitle>Algorithms</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course concentrates on the design of algorithms and the rigorous analysis of their efficiency. We will cover various algorithm design techniques such as divide and conquer, dynamic programming, greedy algorithms, and approximation algorithms; for each algorithm, we will perform complexity (worst case, average case) analysis. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>51520</CourseNumber>
        <CourseShortTitle>Operating Systems</CourseShortTitle>
        <CourseLongTitle>Operating Systems</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course is about the concepts and principles of modern operation systems. It includes: design and implementation of multi-process systems; process synchronization, mutual exclusion; CPU scheduling, deadlock, memory management, segmentation, paging, virtual memory; storage management, file system management, protection and security, evaluation and prediction of performance. Reading the latest paper about operation systems and presentations are required. Every student should participate in debates based on the case studies of Linux System and Windows 7. Prerequisites: CS 30200. Permission of department required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201805</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>51530</CourseNumber>
        <CourseShortTitle>Programming Languages</CourseShortTitle>
        <CourseLongTitle>Programming Languages</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course provides the student with an overview of the issues that arise in the design and construction of translators for programming languages. The course emphasizes techniques that have direct application to the construction of compilers. Students are expected to develop a fundamental understanding of the issues that arise in program translation, including syntax analysis, translation, and rudimentary program optimization. Prerequisites: Graduate student standing. Undergraduate course work on high-level programming languages, and data structure. Permission of department required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201805</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>51540</CourseNumber>
        <CourseShortTitle>Object Oriented Design</CourseShortTitle>
        <CourseLongTitle>Object Oriented Design</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course is for students who already have programming experience. The course exposes students to the depth and breadth of modern programming practice, with the goal of making students better programmers. It provides a rigorous introduction to the advanced concepts behind object oriented programming such as encapsulation, information hiding, inheritance, dynamic binding and polymorphism. We discuss object-oriented design, design patterns and see how they can be implemented in different object-oriented programming languages.  Java and C++ are used as the vehicle for illustrating and implementing these concepts.  Permission of department required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201901</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>51550</CourseNumber>
        <CourseShortTitle>Database Systems</CourseShortTitle>
        <CourseLongTitle>Database Systems</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course provides an introduction to modern database systems. It covers conceptual modeling and database design, formal database design theory, relational data model and SQL, query optimization, external hashing and indexing, and transaction processing, etc. In addition, this course provides fundamental theory, and methodologies of Data Mining. Students will be asked to apply the data mining knowledge for real world problem solving. Prerequisites: Undergraduate studies in CS, particularly CS 44200 or its equivalent. Permission of department required. Typically offered Fall Spring Summer.

        </CourseDescription>
        <CourseEffectiveDate>201805</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>51560</CourseNumber>
        <CourseShortTitle>Software Engineering</CourseShortTitle>
        <CourseLongTitle>Software Engineering</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Software engineering is the discipline concerned with the application of theory, knowledge, and practice for effectively and efficiently building software systems that satisfy the requirements of users and customers. This course provides an introduction to all phases of the life cycle of a software system, including requirement analysis and specification, UML modeling and design, implementation, testing, and operation and maintenance. The principles of project management, cost and effort estimation, scheduling, documentation, and quality assurance are also covered. A group project will be assigned. Each student will play one of the following roles: Project Manager (PM), Requirement Engineer (RE), Software Architect (SA), Integration Engineer (IE), Testing Engineer (TE), and User/Product Director (UPD). Every student will play the role of a Code Developer (CD) as well. Every student should also participate in the activities of the professional associations. The commercial and research prototype tools of IBM Rational Suite will be used. Some latest research papers about Software Engineering will be discussed. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>51570</CourseNumber>
        <CourseShortTitle>Computer Architecture</CourseShortTitle>
        <CourseLongTitle>Computer Architecture</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course is the science and art of selecting and interconnecting hardware components to create computers that meet functional, performance and cost goals. It includes the following topics: Fundamentals of computer design, Instruction set principles and examples, Pipelining, Instruction-Level Parallelism and its dynamic exploitation, exploiting Instruction-Level Parallelism with software approaches, Memory hierarchy design, Parallel Processors and Cloud Computing. RISC, Intel 80x86, VAX, and IBM 360/370 are examples of the computer architecture for discussion. Reading and presenting the latest published papers related branch prediction and instruction-level parallelism are required. A project about designing branch prediction algorithms and evaluating the algorithms using SPEC benchmarks is also required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>51580</CourseNumber>
        <CourseShortTitle>Computer Graphics</CourseShortTitle>
        <CourseLongTitle>Computer Graphics</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  An introduction to advanced computer graphics and the rendering of 3D computer graphics images. Topics include the concepts, principles, algorithms, and programming techniques in 3D interactive computer graphics. Emphasis is on the development and applications of 3D graphic algorithms and methods. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>51590</CourseNumber>
        <CourseShortTitle>Parallel Computing</CourseShortTitle>
        <CourseLongTitle>Parallel Computing</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Parallel computing for science and engineering applications: parallel programming and performance evaluation, parallel libraries and problem-solving environments, models of parallel computing and run-time support systems, and selected applications. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>52000</CourseNumber>
        <CourseShortTitle>Comput Meth In Optimization</CourseShortTitle>
        <CourseLongTitle>Comput Meth In Optimization</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  A treatment of numerical algorithms and software for optimization problems with a secondary emphasis on linear and nonlinear systems of equations: unconstrained and constrained optimization; line search methods; trust region methods; Quasi-Newton methods; linear programming; calculating derivatives; quadratic programming; global optimization, including simulated annealing. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>52300</CourseNumber>
        <CourseShortTitle>Social Econ Legal Asp Security</CourseShortTitle>
        <CourseLongTitle>Social Econ Legal Asp Security</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course focuses on social, legal, and economic aspects of information security and privacy, also including ethics, policies, and human behavioral issues. The course covers the interactions between non-technological aspects of information security as well as relevant technological aspects. It focuses on how non-technological facets can inform and guide technological choices, and how technological choices can enhance or detract from the broader organizational and societal goals. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201901</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>52500</CourseNumber>
        <CourseShortTitle>Parallel Computing</CourseShortTitle>
        <CourseLongTitle>Parallel Computing</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Parallel computing for science and engineering applications: parallel programming and performance evaluation, parallel libraries and problem-solving environments, models of parallel computing and run-time support systems, and selected applications. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>52510</CourseNumber>
        <CourseShortTitle>Distributed Systems</CourseShortTitle>
        <CourseLongTitle>Distributed Systems</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course consists of the discussion of special problems related to distributed control such as election and mutual exclusion, routing, data management, Byzantine agreement, and deadlock handling. The student will get exposed to fundamental issues in distributed system design, recent development, and even research trends in this area, as well as the hands-on experience of using Java sockets to program and implement a distributed system. Prerequisites: Undergraduate coursework in programming languages, operation systems, computer architecture, and algorithm design. Permission of department required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201805</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>52600</CourseNumber>
        <CourseShortTitle>Information Security</CourseShortTitle>
        <CourseLongTitle>Information Security</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  (CSCI 52600) Basic notions of confidentiality, integrity, availability; authentication models; protection models; security kernels; secure programming; audit; intrusion detection and response; operational security issues; physical security issues; personnel security; policy formation and enforcement; access controls; information flow; legal and social issues; identification and authentication in local and distributed systems; classification and trust modeling; and risk assessment. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201408</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>52700</CourseNumber>
        <CourseShortTitle>Software Security</CourseShortTitle>
        <CourseLongTitle>Software Security</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course focuses on software security fundamentals, secure coding guidelines and principles, and advanced software security concepts. Students will learn to assess and understand threats, learn how to design and implement secure software systems, and get hands-on experience with common security pitfalls. Restricted to CS MS and CS PHD students. Significant programming experience and skills are required to complete the labs and projects. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201608</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>52800</CourseNumber>
        <CourseShortTitle>Network Security</CourseShortTitle>
        <CourseLongTitle>Network Security</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The course focuses on the principles and foundations of building secure network systems and on security and privacy challenges in existing and emerging networks. The course compares and analyzes network architectures and network protocols from the physical layer to the access control, network, transport and application layer from an adversarial standpoint to understand how to build more secure protocols that can withstand attacks. Restricted to CS MS and CS PHD students. Significant programming experience and skills are required to complete the projects. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>52900</CourseNumber>
        <CourseShortTitle>Security Analytics</CourseShortTitle>
        <CourseLongTitle>Security Analytics</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course focuses on applied data mining, machine learning, data analytics techniques, and their application and relevance in information security. The course covers basic concepts of data mining and machine learning, computation platforms in support of big data analytics including Map-Reduce and Spark, machine learning algorithms such as classification trees, logistic regression, naive Bayes, k Nearest Neighbors, Support Vector Machines, Artificial Neural Networks (including Feed Forward, Convolutional, and Recurrence), the application of these algorithms to security tasks such as Spam/Phishing detection, malware detection, intrusion detection, and situational awareness. The future and potential role of applying machine learning techniques in information and data security is explored. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201901</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>53000</CourseNumber>
        <CourseShortTitle>Intro Scient Visualiz</CourseShortTitle>
        <CourseLongTitle>Intro Scient Visualiz</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Teaches the fundamentals of scientific visualization and prepares students to apply these techniques in fields such as astronomy, biology, chemistry, engineering, and physics. Emphasis is on the representation of scalar, vector, and tensor fields; data sampling and resampling; and reconstruction using multivariate finite elements (surfaces, volumes, and surfaces on surfaces). Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>53100</CourseNumber>
        <CourseShortTitle>Computational Geometry</CourseShortTitle>
        <CourseLongTitle>Computational Geometry</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Computational geometry studies how to compute with and reason about geometric objects. The subject is playing an increasingly important role in computer graphics, game software, geometric modeling, geographic information systems, and many other applications. Course topics include convex hull, segment manipulations, triangulations, range searching, Voronoi diagrams, window queries, Delaunay triangulation, and duality. Some key algorithms are implemented. Questions of floating-point accuracy and robust algorithm design are considered throughout the course. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>53500</CourseNumber>
        <CourseShortTitle>Interact Comptr Graph</CourseShortTitle>
        <CourseLongTitle>Interact Comptr Graph</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  (ME 57300) The principles of computer graphics and interactive graphical methods for problem solving. Emphasis placed on both development and use of graphical tools for various display devices. Several classes of graphics hardware considered in detail. Topics include pen plotting, storage tubes, refresh, dynamic techniques, three dimensions, color, modeling of geometry, and hidden surface removal. Part of the laboratory involves use of an interactive minicomputer graphics system. Knowledge of programming required. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201508</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>53600</CourseNumber>
        <CourseShortTitle>Data Comm &amp; Comp Netwk</CourseShortTitle>
        <CourseLongTitle>Data Comm &amp; Comp Netwk</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Data communications: communication hardware technologies including local area and longhaul network hardware, circuit and packet switching, interfaces between computer and network hardware, and performance issues. Network architecture: protocol software and conceptual layering, reliable delivery over an unreliable channel, transport protocols, virtual circuits, datagrams, internetworking as a fundamental design concept, the client-server paradigm, naming and name binding, name servers, addressing and address resolution, routing and routing algorithms, congestion and flow control techniques, network file systems, distribution of computation, and DARPA internet protocols (TCP/IP) as examples of protocol organization. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201408</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>54100</CourseNumber>
        <CourseShortTitle>Database Systems</CourseShortTitle>
        <CourseLongTitle>Database Systems</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Fundamentals for the logical design of database systems. The entity-relationship model, semantic model, relational model, hierarchical model, network model. Implementations of the models. Design theory for relational databases. Design of query languages and the use of semantics for query optimization. Design and verification of integrity assertions, and security. Introduction to intelligent query processing and database machines. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201408</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>54200</CourseNumber>
        <CourseShortTitle>Distrib Database Systs</CourseShortTitle>
        <CourseLongTitle>Distrib Database Systs</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Fundamental issues in distributed database systems that are motivated by the computer networking and distribution of processors and databases. The theory, design, specification, implementation, and performance of distributed database systems. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201701</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>54300</CourseNumber>
        <CourseShortTitle>Simul &amp; Model Comp Sys</CourseShortTitle>
        <CourseLongTitle>Simul &amp; Model Comp Sys</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Simulation: discrete event simulation, process oriented simulation, generating random numbers, simulation languages, simulation examples of complex systems. Nondeterministic models: random variables, Poisson process, moment generating functions, statistical inference and data analysis. Modeling: elementary queuing models, networks of queues, applications to performance evaluation of computer systems. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>54701</CourseNumber>
        <CourseShortTitle>Information Retrieval</CourseShortTitle>
        <CourseLongTitle>Information Retrieval</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00. Basic principles and practical algorithms used for information retrieval and text mining: statistical characteristics of text, several important retrieval models, text categorization, recommendation system, clustering, federated text search, link analysis, etc. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>55500</CourseNumber>
        <CourseShortTitle>Cryptography</CourseShortTitle>
        <CourseLongTitle>Cryptography</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  (CSCI 55500) Concepts and principles of cryptography and data security. Cryptography (secret codes): principles of secrecy systems; classical cryptographic systems, including Vigenere and Vernam ciphers; the Data Encryption Standard (DES); public-key encryption; privacy-enhanced email; digital signatures. Proprietary software protection; information theory and number theory; complexity bounds on encryption; key escrow; traffic analysis; attacks against encryption; basic legal issues; e-commerce; and the role of protocols. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201408</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>56000</CourseNumber>
        <CourseShortTitle>Reasoning About Programs</CourseShortTitle>
        <CourseLongTitle>Reasoning About Programs</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The course focuses on the logical foundations and algorithmic techniques used to ensure program correctness. With an emphasis on automated program verification and synthesis, the course covers classical concepts and techniques such as Hoare logic, abstract interpretation, abstraction-refinement and bounded model checking. The course also exposes students to approaches for program synthesis, a new frontier for program reasoning, such as inductive synthesis, synthesis using version space algebras, constraint-based synthesis and synthesis based on machine-learning techniques. The courses emphasizes both theoretical foundations as well as hands-on experience with verification/synthesis tools and SAT/SMT solvers.   Students are expected to have completed undergraduate coursework in Foundations of Computer Science (CS 18200) or equivalent, Systems Programming (CS 25200) or equivalent, and Introduction to the Analysis of Algorithms (CS 38100) or equivalent.  Mathematical maturity is expected. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201901</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>56500</CourseNumber>
        <CourseShortTitle>Programming Languages</CourseShortTitle>
        <CourseLongTitle>Programming Languages</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  An exploration of modern or unconventional concepts of programming languages, their semantics, and their implementations; abstract data types; axiomatic semantics using Hoare's logic and Dijkstra's predicate transformers; denotational semantics; functional, object-oriented, and logic programming; concurrency and Owicki-Gries theory. Example languages include ML, Ada, Oberon, LISP, PROLOG, and CSP. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>56900</CourseNumber>
        <CourseShortTitle>Intro To Robotic Syst</CourseShortTitle>
        <CourseLongTitle>Intro To Robotic Syst</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  (ECE 56900)  The topics to be covered include: basic components of robotic systems; selection of coordinate frames; homogeneous transformations; solutions to kinematic equations; velocity and force/torque relations; manipulator dynamics in Lagrange's formulation; digital simulation of manipulator motion; motion planning; obstacle avoidance; controller design using the computed torque method; and classical controllers for manipulators. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>57200</CourseNumber>
        <CourseShortTitle>Heuristic Prblm Solvng</CourseShortTitle>
        <CourseLongTitle>Heuristic Prblm Solvng</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Design and development of heuristic problem-solving systems. The emphasis is on the development of general data representations, heuristics, and problem-solving strategies that can be applied to a wide class of problems. The task areas explored include game playing, theorem proving, pattern recognition, semantic information processing, cognitive psychology, design synthesis, robotology, and integrated artificial intelligence systems. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>57300</CourseNumber>
        <CourseShortTitle>Data Mining</CourseShortTitle>
        <CourseLongTitle>Data Mining</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  (CSCI 57300) Data Mining has emerged at the confluence of artificial intelligence, statistics, and databases as a technique for automatically discovering summary knowledge in large datasets. This course introduces students to the process and main techniques in data mining, including classification, clustering, and pattern mining approaches. Data mining systems and applications are also covered, along with selected topics in current research.  Offered in alternate years. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201408</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>57700</CourseNumber>
        <CourseShortTitle>Natural Language Processing</CourseShortTitle>
        <CourseLongTitle>Natural Language Processing</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  This course will cover the key concepts and methods used in modern Natural Language Processing (NLP). Throughout the course several core NLP tasks, such as sentiment analysis, information extraction, syntactic and semantic analysis, will be discussed. The course will emphasize machine-learning and data-driven algorithms and techniques, and will compare several different approaches to these problems in terms of their performance, supervision effort and computational complexity. Prerequisites: A background in linear algebra, calculus, statistics and probability, and completion of CS 57800 or equivalent are highly recommended. Strong programming skills in any modem language (Python, Java, C++) are required. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>57800</CourseNumber>
        <CourseShortTitle>Statistical Machine Learning</CourseShortTitle>
        <CourseLongTitle>Statistical Machine Learning</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00. This introductory course will cover many concepts, models, and algorithms in machine learning. Topics include classical supervised learning (e.g., regression and classification), unsupervised learning (e.g., principle component analysis and K-means), and recent development in the machine learning field such as variational Bayes, expectation propagation, and Gaussian processes. While this course will give students the basic ideas and intuition behind modern machine learning methods, the underlying theme in the course is probabilistic inference. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201708</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>57900</CourseNumber>
        <CourseShortTitle>Bioinformatics Algorithms</CourseShortTitle>
        <CourseLongTitle>Bioinformatics Algorithms</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00. Review of Genomes, DNA, RNA, proteins, proteomes. Biological Sequences: dynamic programming; pairwise global, local, and semi-global alignments of genes and proteins; constant, affine, and general gap penalties; RNA alignments; BLOSUM and PAM scoring matrices. Multiple alignment of proteins: approximation algorithms; iterative and progressive alignment methods. Database search for sequences: BLAST and variants. Phylogentic Trees: distance-based methods, ultrametric and additive distance functions; parsimony, and maximum likelihood methods. Whole Genome Alignment: suffix trees and suffix arrays. Systems Biology: Module discovery in biological networks, spectral algorithms for graph clustering. Network alignment: quadratic programming formulations and graph matching. Genetic Variation: haplotype inference, the perfect phylogeny problem and chordal graphs. Additional topics such as next-generation sequencing, analysis of multidimensional data from flow cytometry, and gene expression data, if time permits. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201708</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>58000</CourseNumber>
        <CourseShortTitle>Alg Design Anly &amp; Impl</CourseShortTitle>
        <CourseLongTitle>Alg Design Anly &amp; Impl</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Basic techniques for designing and analyzing algorithms: dynamic programming, divide and conquer, balancing. Upper and lower bounds on time and space costs, worst case and expected cost measures. A selection of applications such as disjoint set union/find, graph algorithms, search trees, pattern matching. The polynomial complexity classes P, NP, and co-NP; intractable problems. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>58400</CourseNumber>
        <CourseShortTitle>Thry Comp/Comp Complex</CourseShortTitle>
        <CourseLongTitle>Thry Comp/Comp Complex</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  The theory of general purpose programming systems. Recursive and partial-recursive functions; recursive and recursively enumerable sets. The Church-Turing thesis. The recursion theorem, Rogers' translation theorem, Rice's undecidability theorem. The general theory of computational complexity: there are no general solutions to natural optimization problems. Complexity for specific models of computation: the polynomial complexity classes P, NP, and PSPACE; NP-hard and PSPACE-hard problems, inherently exponential problems. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>59000</CourseNumber>
        <CourseShortTitle>Topic Computer Sci</CourseShortTitle>
        <CourseLongTitle>Topic Computer Sci</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00 to 5.00.  Directed study for students who wish to undertake individual reading and study on approved topics. Permission of instructor required. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201905</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>5</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>VART</RAPCode>
            <RAPName>Variable Title</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>59100</CourseNumber>
        <CourseShortTitle>Seminar</CourseShortTitle>
        <CourseLongTitle>Seminar</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00.  A weekly seminar presented by faculty and invited speakers, normally in a specific area. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>200801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>UPPR</RAPCode>
            <RAPName>Upper Division</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>VART</RAPCode>
            <RAPName>Variable Title</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>59799</CourseNumber>
        <CourseShortTitle>Graduate Professional Practice</CourseShortTitle>
        <CourseLongTitle>Graduate Professional Practice</CourseLongTitle>
        <CourseDescription>Credit Hours: 0.00.  Internship experience to complement the student's academic coursework and help prepare the student for employment in computer science. The student must present a letter from the proposed employer describing to a reasonable extent the work to be undertaken and find a member of the Computer Science Graduate Faculty to be the instructor. The student must have completed at least one semester as a computer science graduate student at Purdue, West Lafayette. May not be taken in successive semesters. Permission of instructor required. Typically offered Fall Spring Summer.
        </CourseDescription>
        <CourseEffectiveDate>201805</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>FTPV</RAPCode>
            <RAPName>Full-time Privilege</RAPName>
        </CourseAttribute>
        <CourseAttribute>
            <RAPCode>INTR</RAPCode>
            <RAPName>Internship</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>60300</CourseNumber>
        <CourseShortTitle>Adv Tpcs Distrib Systm</CourseShortTitle>
        <CourseLongTitle>Adv Tpcs Distrib Systm</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  (CSCI 60300) Design and control of distributed computing systems (operating systems and database systems). Topics include principles of naming and location, atomicity, resource sharing, concurrency control and other synchronization, deadlock detection and avoidance, security, distributed data access and control, integration of operating systems and computer networks, distributed systems design, consistency control, and fault tolerance.  Prerequisite: CS 50300, 54200. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>61400</CourseNumber>
        <CourseShortTitle>Num Sol Ord Diff Equa</CourseShortTitle>
        <CourseLongTitle>Num Sol Ord Diff Equa</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Numerical solution of initial-value problems by Runge-Kutta methods, general one-step methods, and multistep methods; analysis of truncation error, discretization error, and rounding error; stability of multistep methods; numerical solution of boundary- and eigen-value problems by initial-value techniques and finite difference methods.  Prerequisite: CS 51400. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>61500</CourseNumber>
        <CourseShortTitle>Num Methods For PDEs I</CourseShortTitle>
        <CourseLongTitle>Num Methods For PDEs I</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  (MA 61500) Finite element method for elliptic partial differential equations; weak formulation; finite-dimensional approximations; error bounds; algorithmic issues; solving sparse linear systems; finite element method for parabolic partial differential equations; backward difference and Crank-Nicolson time-stepping; introduction to finite difference methods for elliptic, parabolic, and hyperbolic equations; stability, consistency, and convergence; discrete maximum principles.  Prerequisite: CS 51400, MA 52300. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>62600</CourseNumber>
        <CourseShortTitle>Adv Info Assurance</CourseShortTitle>
        <CourseLongTitle>Adv Info Assurance</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Advanced topics in information assurance, including selections from the following: penetration testing, formal verification of systems, formal models of information flow and protection, distributed system authentication, protocol design and attack, computer viruses and malware, intrusion and anomaly detection models, multi-level security, active defenses, investigation and forensics, network firewalls, anonymity and identity, e-commerce support, and database security models and mechanisms. Offered every third semester.  Prerequisite: CS 52600, 55500. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>63500</CourseNumber>
        <CourseShortTitle>Capt &amp; Renderng Scenes</CourseShortTitle>
        <CourseLongTitle>Capt &amp; Renderng Scenes</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Advanced techniques for automated modeling and visualization of complex environments, such as rooms, buildings, urban scenes, and landscapes.  Topics covered are at the confluence of computer graphics, computer vision and engineering, and include:  capture technologies, acquisition device calibration, view registration, panoramic images, 3D reconstruction from images, view morphing, 3D image warping, lightfield modeling and rendering, visual hulls, point-based modeling and rendering, view dependent texture mapping, and application development issues and examples.  Prerequisite: CS 58000, CS 53500 or a solid foundation in computer graphics, programming proficiency in C or C++ and basic linear algebra. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>63600</CourseNumber>
        <CourseShortTitle>Internetworking</CourseShortTitle>
        <CourseLongTitle>Internetworking</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Principles of Internetwork architecture and communication protocols underlying interoperable systems. Topics include universal interconnection, Internet addressing and routing, address binding, control of Internet congestion and flow, examples of Internet protocol suites (TCP/IP and XNS), round trip time estimation, naming and name resolution, Internet applications programs, and the ISO/OSI model.  Prerequisite: CS 50300. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201701</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>63800</CourseNumber>
        <CourseShortTitle>Multim Ntwrk&amp;Oper Syst</CourseShortTitle>
        <CourseLongTitle>Multim Ntwrk&amp;Oper Syst</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  For graduate students in computer sciences who have a background in networking and operating systems and are interested in research in networked multimedia systems. The course consists of a selection of networking and operating system topics for realizing high performance, predictable, scalable, flexible, and secure multimedia systems. Topics may vary to reflect timely research issues and the current interests of the instructor(s). Students are expected to complete a term project. Presentations also may be required. Undergraduate background in computer science required.  Prerequisite: CS 53600 or 50300. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>64100</CourseNumber>
        <CourseShortTitle>Multim Database Systms</CourseShortTitle>
        <CourseLongTitle>Multim Database Systms</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Prepares students for research in multimedia database systems. Students are exposed to a variety of emerging innovative techniques to store, manipulate, communicate, visualize, and reason with multimedia systems.   Prerequisite: CS 54100 or 54200. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>65500</CourseNumber>
        <CourseShortTitle>Advanced Cryptology</CourseShortTitle>
        <CourseLongTitle>Advanced Cryptology</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Advanced topics in cryptography and cryptanalysis, including selections from the following: Steganographic methods, Cryptanalytic techniques, including differential cryptanalysis, and chosen plaintext attacks. Message digest algorithm construction. Digital cash. Quantum cryptography. N-key systems. Minimal and zero-knowledge systems. Protocol design and failure. Verification of algorithms. Key generation and management. Traffic analysis. VPN construction and operation. Politics, espionage, and law enforcement concerns.  Offered every third semester.  Prerequisite: CS 52600, 55500. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>66100</CourseNumber>
        <CourseShortTitle>Formal Compiling Mthds</CourseShortTitle>
        <CourseLongTitle>Formal Compiling Mthds</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Application of concepts developed in formal language and automata theory to the design of programming languages and their processors. Models of syntactic analysis, including canonical precedence, LR(k) and LL(k) parsing methods and variants; efficiency of each. Synthesis techniques, including symbol tables, storage administration, parameter mechanisms, garbage collection; optimization considerations. Models of synthesis, including level, affix, attributed grammars; prospects of fully automating compiler design. Applicative vs. procedural languages and their implementations based on semantic definition of a language (LISP, Lucid) and on proof-like techniques (PROLOG, equational systems); merits of such approaches.   Prerequisite: CS 50200. Typically offered Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>66200</CourseNumber>
        <CourseShortTitle>Pattn Recog/Decis Proc</CourseShortTitle>
        <CourseLongTitle>Pattn Recog/Decis Proc</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  (ECE 66200)  Introduction to the basic concepts and various approaches of pattern recognition and decision-making processes. Topics include various classifier designs, evaluation of classifiability, learning machines, feature extraction, and modeling.  Prerequisite: ECE 30200. Typically offered Fall.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>69000</CourseNumber>
        <CourseShortTitle>Seminar</CourseShortTitle>
        <CourseLongTitle>Seminar</CourseLongTitle>
        <CourseDescription>Credit Hours: 0.00 to 5.00.  Topics vary. Permission of instructor required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>200801</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>5</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>VART</RAPCode>
            <RAPName>Variable Title</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>69800</CourseNumber>
        <CourseShortTitle>Research MS Thesis</CourseShortTitle>
        <CourseLongTitle>Research MS Thesis</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00 to 18.00.  Research MS Thesis. The student is expected to follow safe research practices, to follow ethical research practices, to maintain communication with the instructor, to formulate a set of reasonable semester research progress milestones with instructor, optionally in writing. Permission of instructor required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201808</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>18</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>69900</CourseNumber>
        <CourseShortTitle>Research PhD Thesis</CourseShortTitle>
        <CourseLongTitle>Research PhD Thesis</CourseLongTitle>
        <CourseDescription>Credit Hours: 1.00 to 18.00.  Research PhD Thesis. The student is expected to follow safe research practices, to follow ethical research practices, to maintain communication with the instructor, to formulate a set of reasonable semester research progress milestones with instructor, optionally in writing. Permission of instructor required. Typically offered Fall Spring Summer.</CourseDescription>
        <CourseEffectiveDate>201805</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>1</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>18</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>B1040</CourseNumber>
        <CourseShortTitle>Micro Lit</CourseShortTitle>
        <CourseLongTitle>Micro Lit</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Introduction to the microcomputer as a word processing, spreadsheet, database, and communications tool. Intended for those in other disciplines. Hardware and software trends, opportunities, and responsibilities in computing are discussed. Lecture and laboratory. Not open to students who have credit in CS 102. 
. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>B1160</CourseNumber>
        <CourseShortTitle>Visual Programming</CourseShortTitle>
        <CourseLongTitle>Visual Programming</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Introduction for non-computer science majors in structured computer programming using a language such as Visual Basic. Modular programming techniques with emphasis on the creation of graphical user interfaces. 
. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>3</CourseCreditMinimumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
    <CourseInventory>
        <CourseSubjectAbbreviation>CS</CourseSubjectAbbreviation>
        <CourseNumber>B1200</CourseNumber>
        <CourseShortTitle>Comp Science I</CourseShortTitle>
        <CourseLongTitle>Comp Science I</CourseLongTitle>
        <CourseDescription>Credit Hours: 3.00.  Introduction to programming using a high-level language and an established programming paradigm. Emphasis on developing problem-solving skills and programming techniques. Topics include control structures, built-in data structures, simple sorting and searching, procedural abstraction, and paradigm-specific concepts and constructs. Required open-lab and closed-lab assignments bring theory to practice. 
. Typically offered Fall Spring.</CourseDescription>
        <CourseEffectiveDate>201401</CourseEffectiveDate>
        <CourseCreditBasis>Regular</CourseCreditBasis>
        <CourseCreditUnits></CourseCreditUnits>
        <CourseCreditMinimumValue>0</CourseCreditMinimumValue>
        <CourseCreditMaximumValue>3</CourseCreditMaximumValue>
        <CourseLevel>
            <CourseLevelCode>GR</CourseLevelCode>
            <CourseLevelDescription>Graduate</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>PR</CourseLevelCode>
            <CourseLevelDescription>Professional</CourseLevelDescription>
        </CourseLevel>
        <CourseLevel>
            <CourseLevelCode>UG</CourseLevelCode>
            <CourseLevelDescription>Undergraduate</CourseLevelDescription>
        </CourseLevel>
        <CourseAttribute>
            <RAPCode>LOWR</RAPCode>
            <RAPName>Lower Division</RAPName>
        </CourseAttribute>
    </CourseInventory>
</CrseCat:CourseCatalog>
